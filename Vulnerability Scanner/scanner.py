#! /usr/bin/env python

import requests
import urllib.parse as urlparse
import urllib3
from bs4 import BeautifulSoup

class Scanner:
    def __init__(self,url):
        self.target_url=url
        self.session = requests.Session()
        self.target_links=[]
        self.target_ignore_list=['http://127.0.0.1/DVWA/logout.php','http://127.0.0.1/mutillidae/index.php?page=login.php']
        self.xss_in_form = []
        self.xss_in_link =[]
        urllib3.disable_warnings()
        print()

    def login(self,url,dict_data):
        parsed_html = BeautifulSoup(self.session.get(url,verify=False).content, features="html.parser")
        input_token =  parsed_html.body.find('input', attrs={'name': 'user_token'}).get("value")
        dict_data["user_token"] = input_token
        self.session.post(url, data=dict_data)


    def scan(self,url):
        response = self.session.get(url,verify=False)
        return self.extract_target_links(response)

    def extract_target_links(self,response):
        parsed_html = BeautifulSoup(response.content, features="html.parser")
        href_links_list = parsed_html.findAll('a',href=True)
        href_links = []
        for link in href_links_list:
            href_links.append(link['href'])
        return href_links

    def extract_href_links(self,url=None):
        if url == None:
            url = self.target_url
        href_links = self.scan(url)
        for href_link in href_links:

            href_link = urlparse.urljoin(self.target_url, str(href_link))
            if "#" in href_link:
                href_link = href_link.split("#")[0]

            if self.target_url in href_link and href_link not in self.target_links and href_link not in self.target_ignore_list:
                self.target_links.append(href_link)
                print("[+]URL --->", href_link)
                self.extract_href_links(href_link)

    def extract_forms(self,url):
        response = requests.get(url,verify=False)
        parsed_html = BeautifulSoup(response.content, features="html.parser")
        return parsed_html.findAll("form")

    def submit_form(self,url,form,value):
        action = form.get("action")
        method = form.get("method")
        target_url = urlparse.urljoin(url,action)

        data = {}
        input_list = form.find_all("input")
        for input in input_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value=value
            data[input_name] = input_value
        if method == "post":
            return self.session.post(target_url,data=data)
        else:
            return self.session.get(target_url,params=data)

    def run_scanner(self):
        for link in self.target_links:

            forms = self.extract_forms(link)
            for form in forms:
                print("\n\n[+]Testing Form in --> "+link)
                is_form_vulnerable_to_XSS = self.test_xss_in_form(form,link)

                if is_form_vulnerable_to_XSS:
                    print("[***]XSS Vulnerability found in " + link +" for form")
                    print(form)
                    self.xss_in_form.append("Link -->  " + str(link))
                    self.xss_in_form.append(str(form))

                if "=" in link:
                    print("[+]Testing Link --> " + link)
                    is_link_vulnerable_to_XSS = self.test_xss_in_link(link)
                    if is_link_vulnerable_to_XSS:
                        print("[***]XSS Vulnerability found in " + link)
                        self.xss_in_link.append(str(link))

    def test_xss_in_link(self,url):
        xss_value="<Script>alert('Hello VickyVirus')</scRipt>"
        url = url.replace("=","="+xss_value)
        response = self.session.get(url)
        if xss_value in str(response.content):
            return True
        else:
            return False

    def test_xss_in_form(self,form,url):
        xss_value = "<ScriPt>alert('Test')</scRipt>"
        response = self.submit_form(url,form,xss_value)
        if xss_value in str(response.content.decode()):
            return True
        else:
            return False

    def write_to_file(self):
        with open("/home/vickyvirus/Documents/VulnerabilityScanner.txt",'w') as file:

            file.write("\n")
            file.write("Scanned Url -- > ")
            file.write("\n\n")
            for target_links_data in self.target_links:
                file.write(target_links_data)
                file.write("\n")

            file.write("\n\n")
            file.write("[***]XSS Vulnerability found in Form")
            file.write("\n\n")
            for xss_form_data in self.xss_in_form:
                file.write(xss_form_data)
                file.write("\n\n")

            file.write("\n\n")
            file.write("[***]XSS Vulnerability found in Link")
            file.write("\n\n")
            for xss_link_data in self.xss_in_link:
                file.write(xss_link_data)
                file.write("\n\n")
            file.close()